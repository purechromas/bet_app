syntax = "proto3";

package event_provider;

// Сообщение для представления события
message Event {
  string id = 1;                  // Уникальный идентификатор события
  string event_name = 2;          // Название события
  double odds = 3;                // Коэффициент ставки на выигрыш
  string status = 4;              // Статус события
  string finish_at = 5;           // Дата и время дедлайна для ставок (ISO 8601 string)
  string created_at = 6;          // Дата и время создания события (ISO 8601 string)
  string updated_at = 7;          // Дата и время последнего обновления события (ISO 8601 string)
}

// Запрос для создания нового события
message CreateEventRequest {
  string event_name = 1;  // Название события
  double odds = 2;        // Коэффициент ставки на выигрыш
  string finish_at = 3;   // Дата и время дедлайна для ставок (ISO 8601 string)
}

// Ответ о создании нового события
message CreateEventResponse {
  Event event = 1;  // Созданное событие
}

// Запрос для получения информации о конкретном событии по идентификатору или названию
message GetEventRequest {
  oneof query {
    string id = 1;
    string event_name = 2;
  }
}

// Ответ с информацией о событии
message GetEventResponse {
  Event event = 1;
}

// Запрос для получения всех событий
message GetListEventsRequest {
  // В будущем можно добавить фильтры и параметры пагинации
  // Например, количество событий (size)
}

// Ответ со списком событий
message GetListEventsResponse {
  repeated Event events = 1;
}

// Запрос для изменения статуса события
message UpdateEventStatusRequest {
  string id = 1;          // Идентификатор события
  string status = 2;     // Новый статус события (ISO 8601 string)
}

message UpdateEventStatusResponse {
  Event event = 1;
}

// Line Provider gRPC сервис
service LineProviderService {
  rpc CreateEvent(CreateEventRequest) returns (CreateEventResponse);
  rpc GetEvent(GetEventRequest) returns (GetEventResponse);
  rpc GetListEvents(GetListEventsRequest) returns (GetListEventsResponse);
  rpc UpdateEventStatus(UpdateEventStatusRequest) returns (UpdateEventStatusResponse);
}

